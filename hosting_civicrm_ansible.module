<?php

// Use the default CiviCRM cron interval for this site.
define('HOSTING_CIVICRM_ANSIBLE_CRON_SITE_DEFAULT', 0);

// Do not run CiviCRM cron for this site.
define('HOSTING_CIVICRM_ANSIBLE_CRON_SITE_DISABLED', -1);

/**
 * Implements hook_init().
 */
function hosting_civicrm_ansible_init() {
  drupal_add_css(drupal_get_path('module', 'hosting_civicrm_ansible') . '/hosting_civicrm_ansible.css');
}

/**
 * Implements hook_node_load().
 */
function hosting_civicrm_ansible_node_load($nodes, $types) {
  if (!in_array('site', $types)) {
    return;
  }

  foreach ($nodes as $node) {
    if (!in_array($node->type, ['site', 'wpsite'])) {
      continue;
    }

    if (in_array($node->platform, hosting_civicrm_get_platforms())) {
      $node->hosting_ansible_cron_last_output = _hosting_ansible_cron_last_output($node);

      // When loading a site node, fetch the site's CiviCRM cron interval
      // from the database.
      $result = db_query('SELECT * FROM {hosting_site} WHERE nid = :nid', array(':nid' => $node->nid))->fetchObject();

      // If no specific cron interval was set for this site, use the default.
      $node->civicrm_ansible_cron_interval = $result->civicrm_ansible_cron_interval ?: variable_get('hosting_civicrm_ansible_cron_default_interval', 900);
      $node->civicrm_ansible_sftpchroot_keys = $result->civicrm_ansible_sftpchroot_keys ?: '';
      $node->civicrm_ansible_mysqlro_keys = $result->civicrm_ansible_mysqlro_keys ?: '';
      $node->civicrm_ansible_mysqlrw_keys = $result->civicrm_ansible_mysqlrw_keys ?: '';
    }
  }
}

/**
 * Implements hook_node_view().
 */
function hosting_civicrm_ansible_node_view($node, $view_mode, $langcode) {
  $node->content['hosting_civicrm_ansible'] = [
    '#weight' => 3000,
  ];

  $node->content['hosting_civicrm_ansible']['#prefix'] = '<div id="hosting-civicrm-ansible-info">';

  if (in_array($node->type, ['site', 'wpsite'])) {
    // Display the CiviCRM cron output
    $cron_text = '<p>' . $node->civicrm_ansible_cron_interval == HOSTING_CIVICRM_ANSIBLE_CRON_SITE_DISABLED ? t('Disabled') : t('Every !interval', array('!interval' => format_interval($node->civicrm_ansible_cron_interval))) . '</p>';

    if (isset($node->civicrm_ansible_cron_interval)) {
      $cron_text .= '<div class="hosting-civicrm-ansible-cron-output">' . $node->hosting_ansible_cron_last_output . '</div>';
    }

    $node->content['hosting_civicrm_ansible']['ansible_last_civicrm_cron'] = [
      '#type' => 'item',
      '#title' => t('Ansible - CiviCRM cron run'),
      '#weight' => 10,
      '#markup' => $cron_text,
    ];
  }

  if (in_array($node->type, ['site', 'wpsite']) || ($node->type == 'server' && !empty($node->services['db']))) {
    // Display database disk space usage
    $stats = [];

    if (isset($node->db_name)) {
      exec('sudo /usr/local/bin/aegir-db-filestats ' . escapeshellarg($node->db_name), $stats);
    }
    else {
      exec('sudo /usr/local/bin/aegir-db-filestats', $stats);
    }

    $stats = implode('', $stats);
    $stats = json_decode($stats);

    foreach ($stats as $key => $val) {
      if (!is_array($val) && !isset($val->name)) {
        unset($stats[$key]);
      }
    }

    $level = 0;
    $total = hosting_civicrm_ansible_calculate_diskusage($stats);

    $formatted = '<div style="max-height: 300px; overflow-y: scroll"><table><thead><tr><th>File</th><th>Size</th></tr></thead><tbody>';
    $tmp = [];
    hosting_civicrm_ansible_format_diskusage($tmp, $stats, $total, $level);

    // Sort by largest first
    uasort($tmp, function($a, $b) {
      return ($a['size'] < $b['size']);
    });

    foreach ($tmp as $t) {
      $formatted .= $t['html'];
    }

    $formatted .= '</tbody></table></div>';

    $node->content['hosting_civicrm_ansible']['database_disk_usage'] = [
      '#type' => 'item',
      '#title' => t('Database Disk Space Usage'),
      '#weight' => 20,
      '#markup' => '<div>' . $formatted . '</div>',
    ];
  }

  $node->content['hosting_civicrm_ansible']['#suffix'] = '</div>';
}

function hosting_civicrm_ansible_node_update($node) {
  if (isset($node->civicrm_ansible_cron_interval)) {
    db_query('UPDATE {hosting_site}
      SET civicrm_ansible_cron_interval = :interval,
        civicrm_ansible_sftpchroot_keys = :sftpkeys,
        civicrm_ansible_mysqlro_keys = :mysqlrokeys,
        civicrm_ansible_mysqlrw_keys = :mysqlrwkeys
      WHERE nid = :nid', [
        ':interval' => $node->civicrm_ansible_cron_interval,
        ':sftpkeys' => $node->civicrm_ansible_sftpchroot_keys,
        ':mysqlrokeys' => $node->civicrm_ansible_mysqlro_keys,
        ':mysqlrwkeys' => $node->civicrm_ansible_mysqlrw_keys,
        ':nid' => $node->nid,
    ]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hosting_civicrm_ansible_form_hosting_settings_alter(&$form, $form_state) {
  $options = hosting_civicrm_ansible_interval_options();
  unset($options[0]);

  $form['hosting_civicrm_ansible_cron_default_interval'] = [
    '#type' => 'select',
    '#title' => t('Ansible - Default CiviCRM cron interval'),
    '#options' => $options,
    '#description' => t('TODO: Not implemented. Cron will always run every 15 minutes. The CiviCRM cron interval to use for all sites unless overridden on the site node itself.'),
    '#default_value' => variable_get('hosting_civicrm_ansible_cron_default_interval', 900),
  ];

  // Add some weight to the buttons to push them to the bottom of the form.
  $form['buttons']['#weight'] = 1000;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the CiviCRM cron interval setting to site node forms.
 */
function hosting_civicrm_ansible_form_site_node_form_alter(&$form, $form_state) {
  if (user_access('edit site')) {
    if (isset($form['nid']['#value']) && _is_civicrm_platform($form['platform']['#value'])) {
      $form['civicrm_ansible_sftpchroot_keys'] = [
        '#type' => 'textarea',
        '#title' => t('Ansible - sFTP chroot public keys'),
        '#description' => t('Enter ssh public keys to grant sFTP access to the <em>files</em> directory of the site.'),
        '#default_value' => $form['#node']->civicrm_ansible_sftpchroot_keys,
        '#weight' => 9,
      ];

      $form['civicrm_ansible_mysqlro_keys'] = [
        '#type' => 'textarea',
        '#title' => t('Ansible - MySQL read-only access ssh public keys'),
        '#description' => t('Enter ssh public keys to grant MySQL read-only access to the site database. The username will be !user.'),
        '#default_value' => $form['#node']->civicrm_ansible_mysqlro_keys,
        '#weight' => 9,
      ];

      $form['civicrm_ansible_mysqlrw_keys'] = [
        '#type' => 'textarea',
        '#title' => t('Ansible - MySQL write access ssh public keys'),
        '#description' => t('Enter ssh public keys to grant MySQL write access to the site database. The username will be !user.'),
        '#default_value' => $form['#node']->civicrm_ansible_mysqlrw_keys,
        '#weight' => 9,
      ];

      $form['civicrm_ansible_cron_interval'] = [
        '#type' => 'select',
        '#title' => t('Ansible - CiviCRM cron interval'),
        '#options' => hosting_civicrm_ansible_interval_options(),
        '#description' => t('TODO: Not implemented. Cron will always run every 15 minutes. The CiviCRM cron will be automatically run for this site at the interval defined here.'),
        '#default_value' => $form['#node']->civicrm_ansible_cron_interval,
        '#weight' => 10,
      ];

      return $form;
    }
  }
}

/**
 * Returns an array of options for the CiviCRM cron interval.
 *
 * @return
 *   An associative array with the interval in seconds as key, and a
 *   human-readable interval as value.
 */
function hosting_civicrm_ansible_interval_options() {
  $options = [
    HOSTING_CIVICRM_CRON_SITE_DISABLED => t('Disabled'),
    HOSTING_CIVICRM_CRON_SITE_DEFAULT => t('Default'),
  ];
  $options += drupal_map_assoc(array(60, 300, 900, 1800, 3600, 21600, 86400), 'format_interval');

  return $options;
}

/**
 * Return the last CiviCRM cron for a site
 */
function _hosting_ansible_cron_last_output($node) {
  $prefix = ($node->type == 'site' ? 'd7' : 'wp') . 'civicron_';
  $shortname = hosting_civicrm_ansible_inventory_shortname($node->title);
  $service = $prefix . $shortname;

  ob_start();
  passthru('sudo /usr/local/bin/aegir-systemctl-status ' . escapeshellarg($service));
  $output = ob_get_clean();

  // Highlight the last cron run
  $output = preg_replace('/; (.* ago)/', '; <span class="hosting-civicrm-ansible-highlight">\1</span>', $output);

  return $output;
}

/**
 * Implements hook_ansible_inventory_alter from the 'aegir_ansible' module
 *
 * @see https://www.drupal.org/project/aegir_ansible/
 */
function hosting_civicrm_ansible_ansible_inventory_alter(&$inventory) {
  $inventory->civicrm_sites = [
    'hosts' => [],
    'vars' => [
      'ansible_ssh_host' => 'localhost',
    ],
  ];

  $nids = hosting_civicrm_get_sites();
  $civicrm_nodes = node_load_multiple($nids);

  foreach ($civicrm_nodes as $node) {
    // Remove the top-level domain name from the shortname
    $shortname = hosting_civicrm_ansible_inventory_shortname($node->title);

    $inventory->{'_meta'}->hostvars->{$node->title} = [
      // @todo drupal=d7, drupal8, wordpress
      'cms' => 'drupal',
      'site_shortname' => $shortname,
      'civicrm_ansible_cron_interval' => $node->civicrm_ansible_cron_interval,
      'civicrm_ansible_sftpchroot_keys' => $node->civicrm_ansible_sftpchroot_keys,
      'civicrm_ansible_mysqlro_keys' => $node->civicrm_ansible_mysqlro_keys,
      'civicrm_ansible_mysqlrw_keys' => $node->civicrm_ansible_mysqlrw_keys,
    ];

    $inventory->civicrm_sites['hosts'][] = $node->title;
  }
}

/**
 * Returns the site shortname for the inventory.
 */
function hosting_civicrm_ansible_inventory_shortname($uri) {
  // Get the base name of the Aegir frontend, assuming the site_name is the fqdn
  // We will later remove this part from the site URL for the short systemd unit name
  // Useful for farms where the are sites using a subdomain.
  // Ex: aegir = aegir1.example.org
  // and: site = mysite.example.org
  // then the shortname = mysite
  $aegir_server_url = variable_get('site_name');
  $parts = explode('.', $aegir_server_url);
  array_shift($parts);
  $aegir_server_url = implode('.', $parts);

  // Remove the top-level domain name from the shortname
  $shortname = $uri;
  $shortname = str_replace($aegir_server_url, '', $shortname);
  $shortname = str_replace('.', '', $shortname);

  return $shortname;
}

/**
 * Calculate recursively the total disk usage in a directory.
 */
function hosting_civicrm_ansible_calculate_diskusage($stats) {
  $total = 0;

  foreach ($stats as $file) {
    if (is_array($file)) {
      $total += hosting_civicrm_ansible_calculate_diskusage($file);
    }
    else {
      $total += $file->asize;
    }
  }

  return $total;
}

/**
 * Semi-recursive display of files/size in a given directory.
 * We only want the first and 2nd level data (ex: /var/lib/mysql/ and the databases in it, but not the details)
 */
function hosting_civicrm_ansible_format_diskusage(&$formatted, $val, $total, $level) {
  foreach ($val as $file) {
    if (is_array($file)) {
      $subtotal = hosting_civicrm_ansible_calculate_diskusage($file);

      // The first entry is the directory itself (the space taken by the dir entry, not the recursive total)
      $formatted[] = [
        'size' => $subtotal,
        'html' => '<tr><td><div style="background: #0f0; white-space: nowrap; width: ' . round($subtotal/$total*100) . '%;">' . $file[0]->name . '</div></td><td>' . format_size($subtotal) . "</td></tr>",
      ];

      unset($file[0]);

      if ($level == 0) {
        hosting_civicrm_ansible_format_diskusage($formatted, $file, $total, $level+1);
      }
    }
    else {
      // Displaying "Apparent size", not actual disk allocation (which mostly impacts small files)
      // NB: format_size is drupal-specific (also exists in d8)
      $formatted[] = [
        'size' => $file->asize,
        'html' => '<tr><td><div style="background: #0f0; white-space: nowrap; width: ' . round($file->asize/$total*100) . '%;">' . $file->name . '</div></td><td>' . format_size($file->asize) . "</td></tr>",
      ];
    }
  }
}
