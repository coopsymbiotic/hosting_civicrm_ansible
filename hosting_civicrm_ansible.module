<?php

// Do not run CiviCRM cron for this site.
define('HOSTING_CIVICRM_ANSIBLE_CRON_SITE_DISABLED', -1);

/**
 * Implements hook_init().
 */
function hosting_civicrm_ansible_init() {
  drupal_add_css(drupal_get_path('module', 'hosting_civicrm_ansible') . '/hosting_civicrm_ansible.css');
}

/**
 * Implements hook_node_load().
 */
function hosting_civicrm_ansible_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if (!in_array($node->type, ['site', 'wpsite'])) {
      continue;
    }

    // Fetch custom data for this site
    $result = db_query('SELECT * FROM {hosting_civicrm_ansible} WHERE nid = :nid', array(':nid' => $node->nid))->fetchObject();

    if (empty($result)) {
      return;
    }

    if ($result->civicrm_cron_interval) {
      // Only display the cron output if we are really viewing the node
      // otherwise it runs a lot of commands for other sites, such as those displayed in the task list
      $node->hosting_ansible_cron_last_output = '';

      if (arg(0) == 'node' || arg(1) == $node->nid) {
        $node->hosting_ansible_cron_last_output = _hosting_ansible_cron_last_output($node);
      }

      // If no specific cron interval was set for this site, use the default.
      $node->civicrm_ansible_cron_interval = $result->civicrm_cron_interval ?: variable_get('hosting_civicrm_ansible_cron_default_interval', 900);
    }

    if ($node->type == 'site') {
      $node->civicrm_ansible_cron_user = $result->civicrm_cron_user ?: variable_get('hosting_civicrm_default_drupal_cron_user', 'admin');
    }
    else {
      $node->civicrm_ansible_cron_user = $result->civicrm_cron_user ?: variable_get('hosting_civicrm_default_wp_cron_user', 'admin');
    }
    $node->civicrm_ansible_sftpchroot_keys = $result->sftpchroot_keys ?: '';
    $node->civicrm_ansible_mysqlro_keys = $result->mysqlro_keys ?: '';
    $node->civicrm_ansible_mysqlrw_keys = $result->mysqlrw_keys ?: '';
  }
}

/**
 * Implements hook_node_view().
 */
function hosting_civicrm_ansible_node_view($node, $view_mode, $langcode) {
  $node->content['hosting_civicrm_ansible'] = [
    '#weight' => 3000,
  ];

  $node->content['hosting_civicrm_ansible']['#prefix'] = '<div id="hosting-civicrm-ansible-info">';

  if (in_array($node->type, ['site', 'wpsite'])) {
    // Display the sftp login, if enabled
    $node->content['hosting_civicrm_ansible']['sftpchroot_keys'] = [
      '#type' => 'item',
      '#title' => t('Ansible - SFTP access'),
      '#weight' => 10,
      '#markup' => ($node->civicrm_ansible_sftpchroot_keys ? hosting_civicrm_ansible_inventory_shortname($node->title) . '@' . $_SERVER['SERVER_NAME'] : 'n/a'),
    ];

    // Display the CiviCRM cron output
    $cron_text = '<p>' . $node->civicrm_ansible_cron_interval == HOSTING_CIVICRM_ANSIBLE_CRON_SITE_DISABLED ? t('Disabled') : t('Every !interval', array('!interval' => format_interval($node->civicrm_ansible_cron_interval))) . '</p>';

    if (isset($node->civicrm_ansible_cron_interval)) {
      $cron_text .= '<div class="hosting-civicrm-ansible-cron-output">' . $node->hosting_ansible_cron_last_output . '</div>';
    }

    $node->content['hosting_civicrm_ansible']['ansible_last_civicrm_cron'] = [
      '#type' => 'item',
      '#title' => t('Ansible - CiviCRM cron run'),
      '#weight' => 10,
      '#markup' => $cron_text,
    ];
    $node->content['hosting_civicrm_ansible']['ansible_civicrm_cron_user'] = [
      '#type' => 'item',
      '#title' => t('Ansible - CiviCRM cron user'),
      '#weight' => 11,
      '#markup' => $node->civicrm_ansible_cron_user ?: variable_get('hosting_civicrm_default_drupal_cron_user', 'admin'),
    ];
  }

  if (in_array($node->type, ['site', 'wpsite']) || ($node->type == 'server' && !empty($node->services['db']))) {
    // Display database disk space usage
    $stats = [];

    // Workaround a bug where the db_name is not being populated anyore in hosting_site
    // to some extent, it's OK, because it's duplicated information
    if (empty($node->db_name)) {
      $drushrc = $node->publish_path . '/sites/' . $node->title . '/drushrc.php';
      if (file_exists($drushrc)) {
        require_once $node->publish_path . '/sites/' . $node->title . '/drushrc.php';
        if (!empty($options['db_name'])) {
          $node->db_name = $options['db_name'];
        }
      }
    }

    if (isset($node->db_name)) {
      exec('sudo /usr/local/bin/aegir-db-filestats ' . escapeshellarg($node->db_name), $stats);
    }
    else {
      exec('sudo /usr/local/bin/aegir-db-filestats', $stats);
    }

    $stats = implode('', $stats);
    $stats = json_decode($stats);

    foreach ($stats as $key => $val) {
      if (!is_array($val) && !isset($val->name)) {
        unset($stats[$key]);
      }
    }

    $level = 0;
    $total = hosting_civicrm_ansible_calculate_diskusage($stats);

    $formatted = '<div style="max-height: 300px; overflow-y: scroll"><table><thead><tr><th>File</th><th>Size</th></tr></thead><tbody>';
    $tmp = [];
    hosting_civicrm_ansible_format_diskusage($tmp, $stats, $total, $level);

    // Sort by largest first
    uasort($tmp, function($a, $b) {
      return ($a['size'] < $b['size']);
    });

    foreach ($tmp as $t) {
      $formatted .= $t['html'];
    }

    $formatted .= '</tbody></table></div>';

    $node->content['hosting_civicrm_ansible']['database_disk_usage'] = [
      '#type' => 'item',
      '#title' => t('Database Disk Space Usage'),
      '#weight' => 20,
      '#markup' => '<div>' . $formatted . '</div>',
    ];
  }

  $node->content['hosting_civicrm_ansible']['#suffix'] = '</div>';
}

function hosting_civicrm_ansible_node_update($node) {
  if (in_array($node->type, ['site', 'wpsite'])) {
    // https://www.drupal.org/node/2340291
    db_merge('hosting_civicrm_ansible')
      ->key(['nid' => $node->nid])
      ->fields([
        'civicrm_cron_interval' => $node->civicrm_ansible_cron_interval ?: variable_get('hosting_civicrm_ansible_cron_default_interval', 900),
        'civicrm_cron_user' => $node->civicrm_ansible_cron_user ?: variable_get('hosting_civicrm_default_drupal_cron_user', 'admin'),
        'sftpchroot_keys' => $node->civicrm_ansible_sftpchroot_keys,
        'mysqlrw_keys' => $node->civicrm_ansible_mysqlrw_keys,
        'mysqlro_keys' => $node->civicrm_ansible_mysqlro_keys,
      ])
      ->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hosting_civicrm_ansible_form_hosting_settings_alter(&$form, $form_state) {
  $options = hosting_civicrm_ansible_interval_options();
  unset($options[0]);

  $form['hosting_civicrm_ansible_cron_default_interval'] = [
    '#type' => 'select',
    '#title' => t('Ansible - Default CiviCRM cron interval'),
    '#options' => $options,
    '#description' => t('The CiviCRM cron interval to use for all sites unless overridden on the site node itself.'),
    '#default_value' => variable_get('hosting_civicrm_ansible_cron_default_interval', 900),
  ];

  // Add some weight to the buttons to push them to the bottom of the form.
  $form['buttons']['#weight'] = 1000;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the CiviCRM cron interval setting to 'site' content-type node forms.
 */
function hosting_civicrm_ansible_form_site_node_form_alter(&$form, $form_state) {
  if (user_access('edit site')) {
    if (isset($form['nid']['#value'])) {
      $form['civicrm_ansible_sftpchroot_keys'] = [
        '#type' => 'textarea',
        '#title' => t('Ansible - sFTP chroot public keys'),
        '#description' => t('Enter ssh public keys to grant sFTP access to the <em>files</em> directory of the site.'),
        '#default_value' => $form['#node']->civicrm_ansible_sftpchroot_keys,
        '#weight' => 9,
      ];

      $form['civicrm_ansible_mysqlro_keys'] = [
        '#type' => 'textarea',
        '#title' => t('Ansible - MySQL read-only access ssh public keys'),
        '#description' => t('Enter ssh public keys to grant MySQL read-only access to the site database. The username will be !user.'),
        '#default_value' => $form['#node']->civicrm_ansible_mysqlro_keys,
        '#weight' => 9,
      ];

      $form['civicrm_ansible_mysqlrw_keys'] = [
        '#type' => 'textarea',
        '#title' => t('Ansible - MySQL write access ssh public keys'),
        '#description' => t('Enter ssh public keys to grant MySQL write access to the site database. The username will be !user.'),
        '#default_value' => $form['#node']->civicrm_ansible_mysqlrw_keys,
        '#weight' => 9,
      ];

      $form['civicrm_ansible_cron_interval'] = [
        '#type' => 'select',
        '#title' => t('Ansible - CiviCRM cron interval'),
        '#options' => hosting_civicrm_ansible_interval_options(),
        '#description' => t('Cron will always run every 15 minutes. The CiviCRM cron will be automatically run for this site at the interval defined here.'),
        '#default_value' => $form['#node']->civicrm_ansible_cron_interval,
        '#weight' => 10,
      ];

      $form['civicrm_ansible_cron_user'] = [
        '#type' => 'textfield',
        '#title' => t('Ansible - CiviCRM cron user'),
        '#description' => t('Run the CiviCRM cron using this user. Defaults to "admin" on WordPress and Drupal. The cron is run using cv, which requires a username (it cannot be an ID). Can be changed by setting the hosting_civicrm_default_drupal_cron_user or hosting_civicrm_default_wp_cron_user variables.'),
        '#default_value' => $form['#node']->civicrm_ansible_cron_user,
        '#weight' => 11,
      ];

      return $form;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the CiviCRM cron interval setting to wpsite content-type node forms.
 */
function hosting_civicrm_ansible_form_wpsite_node_form_alter(&$form, $form_state) {
  hosting_civicrm_ansible_form_site_node_form_alter($form, $form_state);
}

/**
 * Returns an array of options for the CiviCRM cron interval.
 *
 * @return
 *   An associative array with the interval in seconds as key, and a
 *   human-readable interval as value.
 */
function hosting_civicrm_ansible_interval_options() {
  $options = [
    HOSTING_CIVICRM_ANSIBLE_CRON_SITE_DISABLED => t('Disabled'),
  ];
  $options += drupal_map_assoc(array(60, 300, 600, 900, 1800, 3600, 21600, 86400), 'format_interval');

  return $options;
}

/**
 * Return the last CiviCRM cron for a site
 */
function _hosting_ansible_cron_last_output($node) {
  $prefix = ($node->type == 'site' ? 'd7' : 'wp') . 'civicron_';
  $shortname = hosting_civicrm_ansible_inventory_shortname($node->title);
  $service = $prefix . $shortname;

  ob_start();
  passthru('sudo /usr/local/bin/aegir-systemctl-status ' . escapeshellarg($service));
  $output = ob_get_clean();

  // Highlight the last cron run
  $output = preg_replace('/; (.* ago)/', '; <span class="hosting-civicrm-ansible-highlight">\1</span>', $output);

  // WordPress core cron
  if ($node->type == 'wpsite') {
    $service = 'wpcorecron_' . $shortname;
    ob_start();
    passthru('sudo /usr/local/bin/aegir-systemctl-status ' . escapeshellarg($service));
    $out2 = ob_get_clean();
    $out2 = preg_replace('/; (.* ago)/', '; <span class="hosting-civicrm-ansible-highlight">\1</span>', $out2);
    $output .= $out2;
  }

  return $output;
}

/**
 * Implements hook_ansible_inventory_alter from the 'aegir_ansible' module
 *
 * @see https://www.drupal.org/project/aegir_ansible/
 */
function hosting_civicrm_ansible_ansible_inventory_alter(&$inventory) {
  $inventory->civicrm_sites = [
    'hosts' => [],
    'vars' => [
      'ansible_ssh_host' => 'localhost',
    ],
  ];
  $inventory->platforms = [
    'hosts' => [],
    'vars' => [
      'ansible_ssh_host' => 'localhost',
    ],
  ];
  $inventory->servers = [
    'hosts' => [],
    'vars' => [
      'ansible_ssh_host' => 'localhost',
    ],
  ];

  $nids = hosting_civicrm_ansible_get_all_sites($_REQUEST['include_disabled'] ?? FALSE);
  $site_nodes = node_load_multiple($nids);

  // Get the last-login from our usage stats, if available
  $usage_log = NULL;
  if (file_exists('/var/log/aegir/usage.log')) {
    $usage_log = file_get_contents('/var/log/aegir/usage.log');
  }

  foreach ($site_nodes as $node) {
    // Remove the top-level domain name from the shortname
    $shortname = hosting_civicrm_ansible_inventory_shortname($node->title);

    $last_login = '';
    if (preg_match('/,' . $node->title . ',LastLogin:([-0-9]+)/', $usage_log, $matches)) {
      $last_login = $matches[1];
    }

    // Detect if Drupal is using a web subdirectory
    $site_root = $node->publish_path;
    if (is_dir($site_root . '/web/')) {
      $site_root = $site_root . '/web/';
    }
    // Make sure we have a trailing slash
    if (substr($site_root, -1, 1) !== '/') {
      $site_root .= '/';
    }
    $profile = NULL;
    if ($node->profile) {
      $profile_node = node_load($node->profile);
      $profile = $profile_node->short_name;
    }
    $inventory->{'_meta'}->hostvars->{$node->title} = [
      'nid' => $node->nid,
      // The 'cms' is only for backwards compatibility
      'cms' => 'drupal',
      'software' => $node->software ?? '',
      'version' => $node->version ?? '',
      'profile' => $profile,
      'site_shortname' => $shortname,
      // @todo Not sure if this is the right way of getting the root and site_path?
      'site_root' => $site_root,
      'site_path' => $site_root . 'sites/' . $node->title,
      'site_status' => $node->site_status,
      'db_name' => $node->db_name ?? '',
      'db_passwd' => $node->db_passwd ?? '',
      'db_host' => $node->servers['db']->title,
      'db_port' => $node->servers['db']->services['db']->port,
      // @todo db https setting would be nice
      'civicrm_ansible_cron_interval' => $node->civicrm_ansible_cron_interval ?: variable_get('hosting_civicrm_ansible_cron_default_interval', 900),
      'civicrm_ansible_cron_user' => $node->civicrm_ansible_cron_user ?: variable_get('hosting_civicrm_default_drupal_cron_user', 'admin'),
      'civicrm_site_key' => $node->civicrm_sitekey ?: '',
      // Compatibility with hosting_wordpress
      'cron_user' => $node->civicrm_ansible_cron_user ?: variable_get('hosting_civicrm_default_drupal_cron_user', 'admin'),
      'civicrm_ansible_sftpchroot_keys' => $node->civicrm_ansible_sftpchroot_keys,
      'civicrm_ansible_mysqlro_keys' => $node->civicrm_ansible_mysqlro_keys,
      'civicrm_ansible_mysqlrw_keys' => $node->civicrm_ansible_mysqlrw_keys,
      // Useful for stats and other things
      'created_date' => date('Y-m-d H:i:s', $node->created),
      'last_login' => $last_login,
    ];

    // No idea why this is necessary
    if (file_exists('/var/aegir/.drush/provision_symbiotic/provision_symbiotic.drush.inc')) {
      @require_once '/var/aegir/.drush/provision_symbiotic/provision_symbiotic.drush.inc';
    }

    if (function_exists('provision_symbiotic_is_dev_site')) {
      if (provision_symbiotic_is_dev_site($node->title)) {
        $inventory->{'_meta'}->hostvars->{$node->title}['disable_notifications'] = "1";
      }
    }

    $inventory->civicrm_sites['hosts'][] = $node->title;
  }

  // Platforms
  $platforms = hosting_civicrm_ansible_get_all_platforms();
  foreach ($platforms as $platform) {
    $resource = substr($platform['publish_path'], strlen('/var/aegir/platforms/'));
    $resource = preg_replace('#/web$#', '', $resource);
    $inventory->platforms['hosts'][] = $resource;
    $inventory->{'_meta'}->hostvars->{$resource} = $platform;
  }

  // Servers
  $servers = hosting_get_servers('db');
  $servers += hosting_get_servers('http');

  foreach ($servers as $nid => $name) {
    $node = node_load($nid);
    $inventory->servers['hosts'][] = $name;
    $inventory->{'_meta'}->hostvars->{$name} = [
      'hosting_name' => $node->hosting_name,
    ];
    if (!empty($node->services['db'])) {
      $inventory->{'_meta'}->hostvars->{$name}['db'] = [];
      $inventory->{'_meta'}->hostvars->{$name}['db']['type'] = $node->services['db']->type;
      $inventory->{'_meta'}->hostvars->{$name}['db']['available'] = $node->services['db']->available;
      $inventory->{'_meta'}->hostvars->{$name}['db']['port'] = $node->services['db']->port ?? 3306;
      $inventory->{'_meta'}->hostvars->{$name}['db']['db_user'] = $node->services['db']->db_user;
      $inventory->{'_meta'}->hostvars->{$name}['db']['db_passwd'] = $node->services['db']->db_passwd;
    }
    if (!empty($node->services['http'])) {
      $inventory->{'_meta'}->hostvars->{$name}['http'] = [];
      $inventory->{'_meta'}->hostvars->{$name}['http']['type'] = $node->services['http']->type;
      $inventory->{'_meta'}->hostvars->{$name}['http']['available'] = $node->services['http']->available;
      $inventory->{'_meta'}->hostvars->{$name}['http']['port'] = $node->services['http']->port ?? 80;
      $inventory->{'_meta'}->hostvars->{$name}['http']['restart_cmd'] = $node->services['http']->restart_cmd ?? '';
    }
  }
}

/**
 * Returns the site shortname for the inventory.
 */
function hosting_civicrm_ansible_inventory_shortname($uri) {
  // Get the base name of the Aegir frontend, assuming the site_name is the fqdn
  // We will later remove this part from the site URL for the short systemd unit name
  // Useful for farms where the are sites using a subdomain.
  // Ex: aegir = aegir1.example.org
  // and: site = mysite.example.org
  // then the shortname = mysite
  $aegir_server_url = variable_get('site_name');
  $parts = explode('.', $aegir_server_url);
  array_shift($parts);
  $aegir_server_url = implode('.', $parts);

  // Remove the top-level domain name from the shortname
  $shortname = $uri;
  $shortname = str_replace($aegir_server_url, '', $shortname);
  $shortname = str_replace('.', '', $shortname);
  $shortname = str_replace('-', '', $shortname);

  return $shortname;
}

/**
 * Calculate recursively the total disk usage in a directory.
 */
function hosting_civicrm_ansible_calculate_diskusage($stats) {
  $total = 0;

  foreach ($stats as $file) {
    if (is_array($file)) {
      $total += hosting_civicrm_ansible_calculate_diskusage($file);
    }
    else {
      $total += $file->asize;
    }
  }

  return $total;
}

/**
 * Semi-recursive display of files/size in a given directory.
 * We only want the first and 2nd level data (ex: /var/lib/mysql/ and the databases in it, but not the details)
 */
function hosting_civicrm_ansible_format_diskusage(&$formatted, $val, $total, $level) {
  foreach ($val as $file) {
    if (is_array($file)) {
      $subtotal = hosting_civicrm_ansible_calculate_diskusage($file);

      // The first entry is the directory itself (the space taken by the dir entry, not the recursive total)
      $formatted[] = [
        'size' => $subtotal,
        'html' => '<tr><td><div style="background: #0f0; white-space: nowrap; width: ' . round($subtotal/$total*100) . '%;">' . $file[0]->name . '</div></td><td>' . format_size($subtotal) . "</td></tr>",
      ];

      unset($file[0]);

      if ($level == 0) {
        hosting_civicrm_ansible_format_diskusage($formatted, $file, $total, $level+1);
      }
    }
    else {
      // Displaying "Apparent size", not actual disk allocation (which mostly impacts small files)
      // NB: format_size is drupal-specific (also exists in d8)
      $formatted[] = [
        'size' => $file->asize,
        'html' => '<tr><td><div style="background: #0f0; white-space: nowrap; width: ' . round($file->asize/$total*100) . '%;">' . $file->name . '</div></td><td>' . format_size($file->asize) . "</td></tr>",
      ];
    }
  }
}

/**
 * Based on hosting_civicrm_get_sites() but also returns disabled sites
 */
function hosting_civicrm_ansible_get_all_sites($include_disabled = FALSE) {
  $sites = [];

  if ($include_disabled) {
    $result = db_query('SELECT n.nid FROM {node} n LEFT JOIN {hosting_site} s ON n.nid=s.nid WHERE n.type = :type and s.status != :status', [
      ':type' => 'site',
      ':status' => HOSTING_SITE_DELETED,
    ]);
  }
  else {
    $result = db_query('SELECT n.nid FROM {node} n LEFT JOIN {hosting_site} s ON n.nid=s.nid WHERE n.type = :type and s.status = :status', [
      ':type' => 'site',
      ':status' => HOSTING_SITE_ENABLED,
    ]);
  }

  foreach ($result as $record) {
    $sites[] = $record->nid;
  }

  return $sites;
}

/**
 * Returns all platforms
 */
function hosting_civicrm_ansible_get_all_platforms() {
  $platforms = [];

  $result = db_query('SELECT p.* FROM {hosting_platform} p LEFT JOIN {node} n ON n.nid = p.nid WHERE p.status != :status', [
    ':status' => HOSTING_PLATFORM_DELETED,
  ]);

  foreach ($result as $record) {
    $platforms[] = [
      'nid' => $record->nid,
      'web_server_nid' => $record->web_server,
      'publish_path' => $record->publish_path,
      'verified' => $record->verified,
      'status' => $record->status,
    ];
  }

  return $platforms;
}

/**
 * Helper function to execute and log the output of an Ansible command
 *
 * Based on provision_civicrm_ansible_execute() but that function was
 * specific to CiviCRM sites and using tags, using the old Symbiotic playbooks.
 * Only supports Backdrop.
 *
 * @param $site String Ansible resource
 * @param $playbook String Ansible playbook
 */
function hosting_civicrm_ansible_execute($task) {
  // Extract the resource name and playbook to run
  $resource = $playbook = '';
  $node = NULL;

  // Ex: provision-verify
  hosting_task_log($task->vid, 'info', 'hosting_civicrm_ansible_execute: task_command: ' . $task->task_command);
  $task_parts = explode('-', $task->task_command);
  $action = $task_parts[1] ?? NULL;

  if ($task_parts[0] != 'provision') {
    throw new Exception('Unexpected task format: ' . $task->task_command . " Expected: provision-xyz");
  }

  $node = node_load($task->rid);
  // Ex: site, platform, server
  $entity = $node->type;
  // Ex: site uri, server hostname
  $resource = $node->title;
  $playbook = $entity . '/' . $action . '.yml';
  hosting_task_log($task->vid, 'info', 'hosting_civicrm_ansible_execute: preparing to run: ' . $playbook);

  if ($action == 'verify' && $entity == 'platform') {
    // Ex: "/var/aegir/platforms/civicrm-prod" becomes "civicrm-prod"
    $additions = db_query('SELECT publish_path FROM {hosting_platform} WHERE vid = :vid', array(':vid' => $node->vid))->fetchObject();
    $resource = substr($additions->publish_path, strlen('/var/aegir/platforms/'));
    $resource = preg_replace('#/web$#', '', $resource);
  }

  hosting_task_log($task->vid, 'info', 'hosting_civicrm_ansible_execute: inventory resource: ' . $resource);

  if (!$resource || !$playbook) {
    hosting_task_log($task->vid, 'error', 'hosting_civicrm_ansible_execute could not find the resource or playbook for task: ' . print_r($task, 1) . ' -- node: ' . print_r($node, 1), 'error');
    $task->task_status = HOSTING_TASK_ERROR;
    node_save($task);
    return;
  }

  $command = 'sudo /usr/local/bin/aegir-ansible ' . escapeshellarg($resource) . ' ' . escapeshellarg($playbook);
  hosting_task_log($task->vid, 'ok', bt('CiviCRM Ansible: running: !command', ['!command' => $command]));
  // We append this here to make the above easier to read
  $command .= ' 2>&1';

  $task->task_status = HOSTING_TASK_PROCESSING;
  node_save($task);

  // Using this rather complicated method so that ansible does not complain about non-blocking IO
  // Somewhat avoiding drush functions because they do not seem to work
  $descriptors = [
    // respectively stdin, stdout, stderr
    0 => ['pipe', 'r'],
    1 => ['pipe', 'w'],
    2 => ['pipe', 'w'],
  ];

  $process = proc_open($command, $descriptors, $pipes);

  if (is_resource($process)) {
    // Close input pipe
    fclose($pipes[0]);

    // Read output and error
    // ignoring error output because they were piped to stdout
    $output = stream_get_contents($pipes[1]);
    // $error = stream_get_contents($pipes[2]);

    // Close output and error pipes
    fclose($pipes[1]);
    fclose($pipes[2]);
    // Close the process
    $exitCode = proc_close($process);

    // @todo This warning should be 'error' but we are having too many problems with Aegir rolling-back for no reason
    hosting_task_log($task->vid, $exitCode == 0 ? 'ok' : 'warning', 'CiviCRM Ansible output...');
    $task->task_status = $exitCode == 0 ? HOSTING_TASK_SUCCESS : HOSTING_TASK_WARNING;
    $lines = explode("\n", $output);

    foreach ($lines as $key => $line) {
      $line = trim($line);
      $line = preg_replace('/ \*+$/', '', $line);
      if (!$line) {
        continue;
      }
      if (preg_match('/^(fail|error|fatal)/i', $line) && $lines[$key+1] != '...ignoring') {
        // @todo This warning should be 'error' but we are having too many problems with Aegir rolling-back for no reason
        hosting_task_log($task->vid, 'warning', $line);
        $task->task_status = HOSTING_TASK_WARNING;
      }
      elseif (preg_match('/warning/i', $line)) {
        hosting_task_log($task->vid, 'warning', $line);
        $task->task_status = HOSTING_TASK_WARNING;
      }
      elseif (preg_match('/^changed:/', $lines[$key+1])) {
        hosting_task_log($task->vid, 'success', $line);
      }
      else {
        hosting_task_log($task->vid, 'info', $line);
      }
    }
  }

  // Update the task_status
  $task->executed = time();
  node_save($task);
}
